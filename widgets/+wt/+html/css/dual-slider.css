/* Fix any font sizing issues*/
* {
    font: inherit;
}


:root {
    /*Define CSS Properties*/
    --w: 100%;
    --h: 1em;

    /*Thumb Properties*/
    --sliderThumbWidth: 1em;
    /* --numTicks: 9; */

    /* Color Properties*/
    --baseThumbColor: #007ee6 /*#F5F5F5*/;
    --selectedThumbColor: #d78825;
    --rangeFillColor: #99d1ff;
    --unfilledColor: #dee2e6;
    --ticksColor: #000000;
    --invisibleColor: #0000;
}

/* Set Wrapper Styling*/
.wrap {
    /* Create a Variable for Filled Bar Between Thumbs*/
    --dif: calc(var(--max) - var(--min));
    --g: calc(var(--w) - var(--sliderThumbWidth));

    /*Set up organization for Sliders*/
    display: grid;

    /* Add Row for Display of Values */
    /* grid-template: repeat(2,-webkit-max-content) 2em/1fr 1fr; */
    grid-template: repeat(2,max-content) 2em / 1fr 1fr;
    
    overflow: hidden;
    position: relative;
    margin: 2px auto;
    width: var(--w);
    background: linear-gradient(to top, rgba(0,0,0,0) 0.5em, var(--unfilledColor) 0.5em 1.5em, transparent 0);

    font-family: ubuntu mono, consolas, monaco, monospace;
}
.wrap::before, .wrap::after {
    grid-column: 1 / span 2;
    grid-row: 3;
    background: linear-gradient(to top, rgba(0,0,0,0) 0.5em, var(--rangeFillColor) 0.5em 1.5em, transparent 0);
    content: "";
}

/*Calculate Filled Region Between Thumbs*/
.wrap::before {
    margin-left: calc(var(--sliderThumbWidth)/2 + (var(--sliderA) - var(--min))/var(--dif)*var(--g));
    width: calc((var(--sliderB) - var(--sliderA))/var(--dif)*var(--g));
}
.wrap::after {
    margin-left: calc(var(--sliderThumbWidth)/2 + (var(--sliderB) - var(--min))/var(--dif)*var(--g));
    width: calc((var(--sliderA) - var(--sliderB))/var(--dif)*var(--g));
}


[id=multi-lbl] {
    grid-column: 1/span 2;
}


.sr-only {
    /*Set Up Sliders into One Slider*/
    position: absolute;
    -webkit-clip-path: inset(50%);
    clip-path: inset(50%);
}


/*Set Position of Range-Type Objects in HTML*/
input[type=range] {

    /* Organize range slider positions*/
    grid-column: 1/span 2;
    grid-row: 3;
    z-index: 1;
    top: 0;
    left: 0;
    margin: 0;

    /* height: var(--h); */

    /*Reset default colors and styling of range slider*/
    background: none;
    --col: var(--baseThumbColor);
    pointer-events: none; /*Removes blocking of clicks on stacked sliders*/

}

/*Clear Slider Default Appereance*/
input[type=range]::-webkit-slider-runnable-track,
input[type=range]::-webkit-slider-thumb,
input[type=range] {
    -webkit-appearance: none;
}

/*Rebuild Slider Track*/
input[type=range]::-webkit-slider-runnable-track {
    width: 100%;
    height: 100%;
    background: none;
}
input[type=range]::-moz-range-track {
    width: 100%;
    height: 100%;
    background: none;
}

/*Rebuild Slider Thumbs*/
input[type=range]::-webkit-slider-thumb {
    /*Design Slider Thumb*/
    border: 0px;
    width: var(--sliderThumbWidth);
    height: 100%;
    border-radius: 0;    

    /* background: linear-gradient(0deg, #000 0px, transparent 0),
        calc(1em - 1px), 
        radial-gradient(circle, var(--col) calc(1em), transparent 0); */

    /*Set Shape of the Thumb Based on the Color*/
    background-color: var(--col); 
    clip-path: polygon(0 0, 100% 0, 100% 75%, 50% 100%, 0 75%);

    pointer-events: auto;
}
input[type=range]::-moz-range-thumb {
    /*Redesign Slider Thumb*/
    border: none;
    width: var(--sliderThumbWidth);
    height: 100%;
    border-radius: 0;
    /* background: linear-gradient(0deg, #000 0px, transparent 0),
        calc(1em - 1px), 
        radial-gradient(circle, var(--col) calc(1em), transparent 0); */

    /*Set Shape of the Thumb Based on the Color*/
    background-color: var(--col); 
    clip-path: polygon(0 0, 100% 0, 100% 75%, 50% 100%, 0 75%);
    
    pointer-events: auto;
}

/*Set Selected Slider Thumb Coloration when Moving*/
input[type=range]:focus {
    z-index: 2;
    outline: none;
}
input[type=range]:focus, 
input[type=range]:focus + output {
    --col: var(--selectedThumbColor);
}

/*Set Up String Label Above Slider in CSS*/
output {
    grid-row: 2;
    color: var(--col);
    height: 0;
    visibility: hidden;
    visibility: collapse;
}
output:last-child {
    text-align: right;
}
output::after {
    counter-reset: c var(--c);
    content: counter(c);
}

/*Set Up Labels for Above Slider CSS */
.sliderLabels {
  display: table;
  width: 100%;
  margin: 0;
}
.sliderLabels>#MinLabel {
  text-align: left;
  display: table-cell;
}
.sliderLabels>#MaxLabel {
  text-align: right;
  display: table-cell;
}


/* Tick Blocks CSS Styling */
.tickContainer {
  /* Span the Exact Distance Needed*/
  width: calc(var(--w));
  height: 10px;
  
  /* Set Positioning Rules */
  overflow: hidden;
  position: relative;
  margin: 2px auto;
}

.tickEdgeSpace {
    width: calc(var(--sliderThumbWidth)  * (3/8));
    height: 100%;
    display: inline-block;
    border: none;
    background-color: var(--invisibleColor);
}

.tickInnerSpace {
    width: calc((100% - (var(--sliderThumbWidth) * (3/4)) - (var(--sliderThumbWidth) * (var(--displayTicks)/4))) / (var(--displayTicks) - 1));
    height: 100%;
    display: inline-block;
    border: none;
    background-color: var(--invisibleColor);
}

.tickBlock {
    width: calc(var(--sliderThumbWidth) * (1/4));
    height: 100%;
    display: inline-block;
    border: none;
    background-color: var(--ticksColor);
}


.tickEdgeSpaceSVG {
    width: calc(var(--sliderThumbWidth)  * (3/8));
    height: 100%;    
    display: inline-block;
    border: none;
    fill: blue;
}

.tickInnerSpaceSVG {
    width: calc((100% - (var(--sliderThumbWidth) * (3/4)) - (var(--sliderThumbWidth) * (var(--displayTicks)/4))) / (var(--displayTicks) - 1));
    height: 100%;
    display: inline-block;
    border: none;
    background-color: red;
}

.tickBlockSVG {
    width: calc(var(--sliderThumbWidth) * (1/4));
    height: 100%;
    display: inline-block;
    border: none;
    background-color: var(--ticksColor);
}





